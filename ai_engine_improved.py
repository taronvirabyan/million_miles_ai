"""
–≠–ö–°–ü–ï–†–¢–ù–´–ô AI Engine - —Ç–æ–ª—å–∫–æ Gemini API + —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - Gemini –∑–Ω–∞–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–∏, –º—ã –∑–Ω–∞–µ–º —á—Ç–æ –≤ –Ω–∞–ª–∏—á–∏–∏
"""

import json
import os
from typing import Dict, List, Optional, Any
from datetime import datetime
from dataclasses import dataclass

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass

# –¢–æ–ª—å–∫–æ Gemini API
try:
    from google import genai
    GEMINI_AVAILABLE = True
except ImportError:
    GEMINI_AVAILABLE = False


@dataclass
class ClientContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ CRM"""
    client_id: str
    name: str
    budget_min: int
    budget_max: int
    previous_purchases: List[Dict]
    preferences: Dict
    deal_status: str
    notes: str


class ImprovedLuxuryCarAISalesAssistant:
    """–≠–ö–°–ü–ï–†–¢–ù–´–ô AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç - Gemini API + —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å"""
    
    def __init__(self, crm_data_path: str = "data/crm_data.json", ai_provider: str = "gemini"):
        self.crm_data = self._load_crm_data(crm_data_path)
        self.ai_provider = ai_provider

    def _load_crm_data(self, path: str) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ CRM –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with open(path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            return self._get_demo_data()
    
    def _get_demo_data(self) -> Dict:
        """–î–µ–º–æ –¥–∞–Ω–Ω—ã–µ"""
        return {
            "clients": [
                {
                    "client_id": "DEMO-001",
                    "name": "–î–µ–º–æ –ö–ª–∏–µ–Ω—Ç", 
                    "budget_range": {"min": 30000000, "max": 50000000},
                    "previous_purchases": [],
                    "preferences": {"brands_interested": ["Bentley"]},
                    "deal_status": "new_lead",
                    "notes": "–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç"
                }
            ],
            "inventory": []
        }

    def find_client_by_name(self, name: str) -> Optional[ClientContext]:
        """–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏"""
        for client in self.crm_data.get("clients", []):
            if name.lower() in client["name"].lower():
                return ClientContext(
                    client_id=client["client_id"],
                    name=client["name"],
                    budget_min=client["budget_range"]["min"],
                    budget_max=client["budget_range"]["max"],
                    previous_purchases=client.get("previous_purchases", []),
                    preferences=client.get("preferences", {}),
                    deal_status=client.get("deal_status", "new_lead"),
                    notes=client.get("notes", "")
                )
        return None

    def _analyze_request_intent(self, user_message: str) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        msg_lower = user_message.lower()
        
        # –ó–∞–ø—Ä–æ—Å –æ –Ω–∞–ª–∏—á–∏–∏/–∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
        inventory_keywords = [
            '–Ω–∞–ª–∏—á–∏', '–µ—Å—Ç—å –≤ –ø—Ä–æ–¥–∞–∂–µ', '–¥–æ—Å—Ç—É–ø–Ω', '–∫—É–ø–∏—Ç—å —Å–µ–π—á–∞—Å', 
            '–≤ —Å–∞–ª–æ–Ω–µ', '–º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å', '—Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö', '—á—Ç–æ –µ—Å—Ç—å',
            '–º–∞—à–∏–Ω –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π', '–≤–µ—Å—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç', '–≤—Å—è –∫–æ–ª–ª–µ–∫—Ü–∏—è',
            '–∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –≤ –Ω–∞–ª–∏—á–∏–∏', '–ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ', '—á—Ç–æ –ø—Ä–æ–¥–∞–µ—Ç—Å—è'
        ]
        
        if any(keyword in msg_lower for keyword in inventory_keywords):
            return "inventory_request"
            
        return "general_inquiry"

    def _generate_gemini_expert_response(self, user_message: str, client: Optional[ClientContext], chat_history: List[Dict]) -> str:
        """–û–°–ù–û–í–ù–û–ô –º–µ—Ç–æ–¥: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –≤ Gemini –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"""
        
        try:
            # –ë–ï–ó–û–ü–ê–°–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            api_key = os.getenv("GEMINI_API_KEY")
            if not api_key:
                raise Exception("GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            from google import genai
            gemini_client = genai.Client(api_key=api_key)
            
            # –°–æ–±–∏—Ä–∞–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ –¥–ª—è Gemini
            comprehensive_prompt = self._build_comprehensive_prompt(user_message, client, chat_history)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å API
            response = gemini_client.models.generate_content(
                model='gemini-2.0-flash',  # –ü–æ—Å–ª–µ–¥–Ω—è—è –º–æ–¥–µ–ª—å
                contents=comprehensive_prompt
            )
            
            return response.text
            
        except Exception as e:
            print(f"Gemini error: {e}")
            raise Exception(f"–û—à–∏–±–∫–∞ Gemini API: {e}")

    def _build_comprehensive_prompt(self, user_message: str, client: Optional[ClientContext], chat_history: List[Dict]) -> str:
        """–°—Ç—Ä–æ–∏—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –¥–ª—è Gemini"""
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        request_intent = self._analyze_request_intent(user_message)
        
        # –ë–ê–ó–û–í–ê–Ø –†–û–õ–¨ –ò –ö–û–ù–¢–ï–ö–°–¢
        prompt = """–¢—ã - –í–∏–∫—Ç–æ—Ä–∏—è, —Ç–æ–ø-—ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–º –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º –≤ Million Miles (—Å 2009 –≥–æ–¥–∞).
–¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å —Å VIP –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –ø—Ä–æ–¥–∞–µ—à—å –ª—é–∫—Å–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –æ—Ç 15 –¥–æ 80 –º–ª–Ω —Ä—É–±–ª–µ–π.

–í–ê–ñ–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´:
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
‚Ä¢ –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ "—á—Ç–æ –≤ –Ω–∞–ª–∏—á–∏–∏" - –ø–æ–∫–∞–∑—ã–≤–∞–π –¢–û–õ–¨–ö–û –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –∏–∑ INVENTORY
‚Ä¢ –î–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π - –∏—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ–∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –∑–Ω–∞–Ω–∏—è
‚Ä¢ –î–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π - —Å–æ—á–µ—Ç–∞–π –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏

–°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø:
‚Ä¢ –û–±—Ä–∞—â–∞–π—Å—è –∫ –∫–ª–∏–µ–Ω—Ç—É –ø–æ –∏–º–µ–Ω–∏ (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ)
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–µ–Ω—ã
‚Ä¢ –î–æ–±–∞–≤–ª—è–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–æ—Å—Ç–∞–≤–ª—è—é—â—É—é 
‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞–π —Ç–µ—Å—Ç-–¥—Ä–∞–π–≤—ã –∏ VIP —Å–µ—Ä–≤–∏—Å
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 200 —Å–ª–æ–≤

"""
        
        # –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–õ–ò–ï–ù–¢–ï
        if client:
            prompt += f"""
–î–ê–ù–ù–´–ï –ö–õ–ò–ï–ù–¢–ê:
‚Ä¢ –ò–º—è: {client.name}
‚Ä¢ –ë—é–¥–∂–µ—Ç: {client.budget_min//1000000}-{client.budget_max//1000000} –º–ª–Ω ‚ÇΩ
‚Ä¢ –°—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏: {client.deal_status}
‚Ä¢ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {client.preferences}
‚Ä¢ –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–∫—É–ø–∫–∏: {client.previous_purchases}
‚Ä¢ –ó–∞–º–µ—Ç–∫–∏: {client.notes}

"""
        else:
            prompt += "\n–ö–õ–ò–ï–ù–¢: –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç (–¥–∞–Ω–Ω—ã–µ —É—Ç–æ—á–Ω—è—é—Ç—Å—è)\n"
        
        # –í–°–ï–ì–î–ê –ø–æ–∫–∞–∑—ã–≤–∞–µ–º inventory - —ç—Ç–æ –Ω–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        prompt += "\nüè™ –ê–í–¢–û–ú–û–ë–ò–õ–ò –í –ù–ê–õ–ò–ß–ò–ò –í –°–ê–õ–û–ù–ï Million Miles:\n"
        if self.crm_data.get("inventory"):
            for item in self.crm_data.get("inventory", []):
                status_emoji = "‚úÖ" if item["status"] == "available" else "üîí"
                price_millions = item["price"] // 1000000
                prompt += f"""
{status_emoji} {item["brand"]} {item["model"]} ({item["year"]})
   ‚Ä¢ –¶–≤–µ—Ç: {item["color"]}
   ‚Ä¢ –î–≤–∏–≥–∞—Ç–µ–ª—å: {item["engine"]}
   ‚Ä¢ –¶–µ–Ω–∞: {price_millions} –º–ª–Ω ‚ÇΩ
   ‚Ä¢ –°—Ç–∞—Ç—É—Å: {item["status"]}
   ‚Ä¢ –û–ø—Ü–∏–∏: {', '.join(item["features"])}
   ‚Ä¢ –õ–æ–∫–∞—Ü–∏—è: {item["location"]}
"""
        else:
            prompt += "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–∞–ª–æ–≥. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É –∑–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.\n"
        
        # –ò–°–¢–û–†–ò–Ø –ß–ê–¢–ê
        if chat_history and len(chat_history) > 1:
            prompt += f"\n–ò–°–¢–û–†–ò–Ø –†–ê–ó–ì–û–í–û–†–ê:\n"
            for msg in chat_history[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
                role = "–ö–ª–∏–µ–Ω—Ç" if msg["role"] == "user" else "–í–∏–∫—Ç–æ—Ä–∏—è"
                prompt += f"{role}: {msg['content']}\n"
        
        # –ó–ê–ü–†–û–° –ö–õ–ò–ï–ù–¢–ê –ò –ê–ù–ê–õ–ò–ó
        prompt += f"\n–ó–ê–ü–†–û–° –ö–õ–ò–ï–ù–¢–ê: {user_message}\n"
        prompt += f"–¢–ò–ü –ó–ê–ü–†–û–°–ê: {request_intent}\n"
        
        # –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –û–¢–í–ï–¢–ê
        if request_intent == "inventory_request":
            prompt += """
–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –û–¢–í–ï–¢–£ (–¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –æ –Ω–∞–ª–∏—á–∏–∏):
1. –ü–æ–∫–∞–∂–∏ –¢–û–õ–¨–ö–û –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –∏–∑ INVENTORY –≤—ã—à–µ
2. –£–∫–∞–∑—ã–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞, —Ü–µ–Ω—ã, —Å—Ç–∞—Ç—É—Å
3. –û—Ç–º–µ—á–∞–π –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ
4. –£—á–∏—Ç—ã–≤–∞–π –±—é–¥–∂–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–µ–Ω
5. –ü—Ä–µ–¥–ª–∞–≥–∞–π –æ—Å–º–æ—Ç—Ä –∏ —Ç–µ—Å—Ç-–¥—Ä–∞–π–≤

–û–¢–í–ï–ß–ê–ô:"""
        else:
            prompt += """
–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –û–¢–í–ï–¢–£ (–¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π/—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π):
1. –ò—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
2. –î–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —É—á–∏—Ç—ã–≤–∞–π –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –∏–∑ INVENTORY
3. –î–∞–≤–∞–π —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
4. –£—á–∏—Ç—ã–≤–∞–π –±—é–¥–∂–µ—Ç –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
5. –ü—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏

–û–¢–í–ï–ß–ê–ô:"""
        
        return prompt

    def generate_response(self, user_message: str, client_name: Optional[str], chat_history: List[Dict]) -> str:
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ - –¢–û–õ–¨–ö–û GEMINI API"""
        
        # –ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ –≤ CRM
        client_context = None
        if client_name and client_name != "–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç":
            client_context = self.find_client_by_name(client_name)
        
        try:
            # –¢–û–õ–¨–ö–û Gemini API - –Ω–∏–∫–∞–∫–∏—Ö fallback!
            return self._generate_gemini_expert_response(user_message, client_context, chat_history)
            
        except Exception as e:
            # –ï—Å–ª–∏ Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
            return f"""‚ö†Ô∏è **–û—à–∏–±–∫–∞ AI —Å–∏—Å—Ç–µ–º—ã:**

{str(e)}

**–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á Gemini
- –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –Ω–∞–ª–∏—á–∏–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–≤–æ—Ç—ã API

**–î–ª—è –∫–ª–∏–µ–Ω—Ç–∞:**
–ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –Ω–∞–ø—Ä—è–º—É—é –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +7 (495) 123-45-67."""


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
def demo_improved_system():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –≠–ö–°–ü–ï–†–¢–ù–û–ô –°–ò–°–¢–ï–ú–´\n")
    
    assistant = ImprovedLuxuryCarAISalesAssistant(ai_provider='gemini')
    
    test_queries = [
        ("–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—à–∏–Ω –≤ –Ω–∞–ª–∏—á–∏–∏", "–í–∏–∫—Ç–æ—Ä –°–∞–ø—Ñ–∏—Ä–æ–≤"),
        ("–†–∞—Å—Å–∫–∞–∂–∏ –æ Mercedes-AMG GT 63 S", "–ú–∏—Ö–∞–∏–ª –ó–æ–ª–æ—Ç–æ–≤"),
        ("–ü–æ—Å–æ–≤–µ—Ç—É–π –º–∞—à–∏–Ω—É –≤ –±—é–¥–∂–µ—Ç–µ 40-50 –º–ª–Ω", "–ê–Ω–Ω–∞ –ò–∑—É–º—Ä—É–¥–æ–≤–∞"), 
        ("–°—Ä–∞–≤–Ω–∏ Bentley –∏ Rolls-Royce", "–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç")
    ]
    
    for query, client in test_queries:
        print(f"üë§ {client}: {query}")
        response = assistant.generate_response(query, client, [])
        print(f"ü§ñ –í–∏–∫—Ç–æ—Ä–∏—è: {response}")
        print("-" * 80)

if __name__ == "__main__":
    demo_improved_system() 